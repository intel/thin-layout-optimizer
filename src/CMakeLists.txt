function(add_cc_source_impl BUILD_TARGET SRC_DIR)
  foreach(SRC_FILE IN LISTS ARGN)
    #    message("ADDING: ${BUILD_TARGET} <-- ${SRC_FILE}")
    foreach (POSTFIX IN LISTS SANITIZE_POSTFIXES)
      #          message("ADDING: ${BUILD_TARGET}${POSTFIX} <-- ${SRC_FILE}")
      target_sources("${BUILD_TARGET}${POSTFIX}" PRIVATE ${SRC_DIR}/${SRC_FILE})
    endforeach()
    #    target_sources("${BUILD_TARGET}" PRIVATE ${SRC_DIR}/${SRC_FILE})
    add_static_analysis_impl_file(${SRC_DIR}/${SRC_FILE})
  endforeach()
endfunction()

function(impl_dir_to_target DIR DIR_TARGET)
  message(FATAL_ERROR "UNUSED")
  if(${DIR} MATCHES "${CMAKE_SOURCE_DIR}/src/")
    string(REPLACE "${CMAKE_SOURCE_DIR}/src/" "" DIR ${DIR})
    string(REGEX REPLACE "\/.*" "" DIR ${DIR})
    set(${DIR_TARGET} "hf-${DIR}" PARENT_SCOPE)
  else()
    message(FATAL_ERROR "Unknown dir: ${DIR}")
  endif()
endfunction()

macro(add_cc_source_cur)
  add_cc_source_impl(${HFSORT_LIB} ${CMAKE_CURRENT_SOURCE_DIR} ${ARGN})
endmacro()


#add_executable(${HFSORT})
#add_library(${HFSORT_LIB} STATIC /dev/null)
#foreach (POSTFIX IN LISTS SANITIZE_POSTFIXES)
#  add_library(${HFSORT_LIB}${POSTFIX} STATIC /dev/null)
#endforeach()
foreach (POSTFIX IN LISTS SANITIZE_POSTFIXES)
  if(POSTFIX)
    add_library(${HFSORT_LIB}${POSTFIX} SHARED EXCLUDE_FROM_ALL /dev/null )
    add_executable(${HFSORT_EXE}${POSTFIX} EXCLUDE_FROM_ALL)
  else()
    add_library(${HFSORT_LIB}${POSTFIX} STATIC /dev/null )
    add_executable(${HFSORT_EXE}${POSTFIX})
  endif()

  set_target_properties(${HFSORT_LIB}${POSTFIX} PROPERTIES LINKER_LANGUAGE CXX)
  set_target_properties(${HFSORT_EXE}${POSTFIX} PROPERTIES LINKER_LANGUAGE CXX)
  set_target_properties(${HFSORT_EXE}${POSTFIX} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
endforeach()

add_subdirectory(main)
add_subdirectory(perf)
add_subdirectory(util)
add_subdirectory(system)
add_subdirectory(sym)
add_subdirectory(cfg)

foreach (OPTS_AND_POSTFIX IN LISTS SANITIZE_OPTS_AND_POSTFIXES)
  if(OPTS_AND_POSTFIX)
    string(REPLACE "|" ";" OPTS_AND_POSTFIX ${OPTS_AND_POSTFIX})
    list(GET OPTS_AND_POSTFIX 0 OPTS)
    list(GET OPTS_AND_POSTFIX 1 POSTFIX)
    string(REPLACE "-" "_" DEFINE_ID ${POSTFIX})
    string(TOUPPER ${DEFINE_ID} DEFINE_ID)
    set(DEFINE_ID "-DTLO${DEFINE_ID}")
    target_compile_options(${HFSORT_EXE}${POSTFIX} PRIVATE "-fno-omit-frame-pointer" "-g3" "${DEFINE_ID}" "-DTLO_SANITIZED")
    target_compile_options(${HFSORT_LIB}${POSTFIX} PRIVATE "-fno-omit-frame-pointer" "-g3" "${DEFINE_ID}" "-DTLO_SANITIZED")

    string(REPLACE " " ";" OPTS ${OPTS})
    foreach (OPT IN LISTS OPTS)
      target_compile_options(${HFSORT_EXE}${POSTFIX} PRIVATE ${OPT})
      target_compile_options(${HFSORT_LIB}${POSTFIX} PRIVATE ${OPT})
      target_link_options(${HFSORT_EXE}${POSTFIX} PRIVATE ${OPT})
      target_link_options(${HFSORT_LIB}${POSTFIX} PRIVATE ${OPT})
    endforeach()
    if(POSTFIX STREQUAL "-msan")
      if (FOUND_ZSTD_MSAN)
        target_compile_options(${HFSORT_EXE}${POSTFIX} PRIVATE "-DTLO_ZSTD_MSAN")
        target_compile_options(${HFSORT_LIB}${POSTFIX} PRIVATE "-DTLO_ZSTD_MSAN")
      endif()
    endif()
    if (FOUND_ZSTD)
      target_compile_options(${HFSORT_EXE}${POSTFIX} PRIVATE "-DTLO_ZSTD")
      target_compile_options(${HFSORT_LIB}${POSTFIX} PRIVATE "-DTLO_ZSTD")
    endif()
    target_compile_options(${HFSORT_EXE}${POSTFIX} PRIVATE "-DTLO_DEBUG_ENABLED_GLBL")
    target_compile_options(${HFSORT_LIB}${POSTFIX} PRIVATE "-DTLO_DEBUG_ENABLED_GLBL")

  endif()
endforeach()

if (FOUND_ZSTD)
  target_compile_options(${HFSORT_EXE} PRIVATE "-DTLO_ZSTD")
  target_compile_options(${HFSORT_LIB} PRIVATE "-DTLO_ZSTD")
endif()

foreach (POSTFIX IN LISTS SANITIZE_POSTFIXES)
  get_external_libs("${POSTFIX}" EXTERNAL_LIBS)
  message("EXTERNAL_LIBS: ${EXTERNAL_LIBS}")
  target_link_libraries(${HFSORT_EXE}${POSTFIX} ${HFSORT_LIB}${POSTFIX} ${EXTERNAL_LIBS})

endforeach()

add_custom_target(${SANITIZED_BUILD})
foreach (POSTFIX IN LISTS SANITIZE_POSTFIXES)
  if(POSTFIX)
    add_custom_target(${SANITIZED_BUILD}${POSTFIX} DEPENDS ${HFSORT_EXE}${POSTFIX})
    add_dependencies(${SANITIZED_BUILD} ${SANITIZED_BUILD}${POSTFIX})
  endif()
endforeach()

add_custom_target(everything DEPENDS ${HFSORT_EXE} ${SANITIZED_BUILD})

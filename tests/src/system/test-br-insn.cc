#include "gtest/gtest.h"

#include "src/system/br-insn.h"

#include <cstring>
#include <span>
#include <string>
struct test_pair_t {
    // NOLINTBEGIN(cppcoreguidelines-avoid-const-or-ref-data-members)
    char const * const            expec_name_;
    const uint32_t                nbytes_;
    const std::array<uint8_t, 12> bytes_;
    // NOLINTEND(cppcoreguidelines-avoid-const-or-ref-data-members)

    template<typename... Ts_t>
    constexpr test_pair_t(char const * s, Ts_t &&... ts)
        : expec_name_(s),
          nbytes_(sizeof...(Ts_t)),
          bytes_({ { static_cast<uint8_t>(std::forward<Ts_t>(ts))... } }) {}
};

TEST(system, br_insn_sorted) {
    size_t i;
    for (i = 1; i < tlo::system::br_insn_t::end(); ++i) {
        const tlo::system::br_insn_t cur{ i };
        const tlo::system::br_insn_t prev{ i - 1 };
        ASSERT_TRUE(prev.good());
        ASSERT_TRUE(cur.good());
        ASSERT_TRUE(prev.lt(cur));
    }
    {
        const tlo::system::br_insn_t cur{ i };
        ASSERT_TRUE(cur.bad());
    }
}

TEST(system, br_insn_find) {
    // NOLINTBEGIN(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays)
    static constexpr test_pair_t k_test_pairs[] = {
        { "call_rel32", 0xe8, 0x00, 0x00, 0x00, 0x00 },
        { "call_ind", 0x41, 0xff, 0xd1 },
        { "call_ind", 0xff, 0xd1 },
        { "ret", 0xc3 },
        { "iret", 0x48, 0xcf },
        { "ja_rel32", 0x0f, 0x87, 0x00, 0x00, 0x00, 0x00 },
        { "jae_rel32", 0x0f, 0x83, 0x00, 0x00, 0x00, 0x00 },
        { "jb_rel32", 0x0f, 0x82, 0x00, 0x00, 0x00, 0x00 },
        { "jbe_rel32", 0x0f, 0x86, 0x00, 0x00, 0x00, 0x00 },
        { "jz_rel32", 0x0f, 0x84, 0x00, 0x00, 0x00, 0x00 },
        { "jnz_rel32", 0x0f, 0x85, 0x00, 0x00, 0x00, 0x00 },
        { "jl_rel32", 0x0f, 0x8c, 0x00, 0x00, 0x00, 0x00 },
        { "jle_rel32", 0x0f, 0x8e, 0x00, 0x00, 0x00, 0x00 },
        { "jg_rel32", 0x0f, 0x8f, 0x00, 0x00, 0x00, 0x00 },
        { "jge_rel32", 0x0f, 0x8d, 0x00, 0x00, 0x00, 0x00 },
        { "jo_rel32", 0x0f, 0x80, 0x00, 0x00, 0x00, 0x00 },
        { "jno_rel32", 0x0f, 0x81, 0x00, 0x00, 0x00, 0x00 },
        { "js_rel32", 0x0f, 0x88, 0x00, 0x00, 0x00, 0x00 },
        { "jns_rel32", 0x0f, 0x89, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_rel8", 0xe3, 0x89 },
        { "jmp_rel8", 0xe3, 0x00 },
        { "jmp_rel8", 0xe3, 0xff },
        { "jp_rel32", 0x0f, 0x8a, 0x00, 0x00, 0x00, 0x00 },
        { "jnp_rel32", 0x0f, 0x8b, 0xff, 0xff, 0xff, 0xff },
        { "jmp_rel32", 0xe9, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_ind", 0x41, 0xff, 0xe1 },
        { "jmp_ind", 0x41, 0xff, 0xe7 },
        { "call_ind", 0xff, 0xd4 },
        { "jmp_ind", 0xff, 0xe1 },
        { "call_riprel", 0xff, 0x15, 0x12, 0x34, 0x45, 0x67 },
        { "jmp_riprel", 0xff, 0x25, 0xff, 0xff, 0xff, 0xff },
        { "", 0xff, 0xef },
        { "loop", 0xe2, 0x00 },
        { "int", 0xcd, 0x0c },
        { "int3", 0xcc },
        { "syscall", 0x0f, 0x05 },
        { "sysret", 0x48, 0x0f, 0x07 },
        { "sysret", 0x0f, 0x07 },
        { "", 0x66, 0x2e, 0x0f, 0x1f, 0x84 },
        { "loop", 0xe2, 0x23 },
        { "call_rel32", 0xe8, 0x1e, 0x00, 0x00, 0x00 },
        { "ja_rel8", 0x77, 0x1c },
        { "jae_rel8", 0x73, 0x1a },
        { "jb_rel8", 0x72, 0x18 },
        { "jbe_rel8", 0x76, 0x16 },
        { "jz_rel8", 0x74, 0x14 },
        { "jnz_rel8", 0x75, 0x12 },
        { "jl_rel8", 0x7c, 0x10 },
        { "jle_rel8", 0x7e, 0x0e },
        { "jg_rel8", 0x7f, 0x0c },
        { "jge_rel8", 0x7d, 0x0a },
        { "jo_rel8", 0x70, 0x08 },
        { "jno_rel8", 0x71, 0x08 },
        { "js_rel8", 0x78, 0x08 },
        { "jns_rel8", 0x79, 0x08 },
        { "jmp_rel8", 0xeb, 0x06 },
        { "jp_rel32", 0x0f, 0x8a, 0xff, 0xff, 0xff, 0xff },
        { "jnp_rel32", 0x0f, 0x8b, 0xff, 0xff, 0xff, 0xff },
        { "", 0xff, 0xff, 0xff, 0xff },
        { "", 0xff, 0xff },
        { "", 0x0 },
        { "jmp_ind", 0x3e, 0xff, 0xe0 },
        { "jmp_ind", 0x3e, 0x41, 0xff, 0xe1 },
        { "jmp_riprel", 0xf2, 0xff, 0x25, 0xb4, 0xdb, 0x01, 0x00 },
        { "jmp_ind", 0x3e, 0x41, 0xff, 0xe1 },
        { "jmp_dbl_ind", 0xff, 0x61, 0x62 },
        { "jmp_dbl_ind", 0x41, 0xff, 0x61, 0x62 },
        { "call_dbl_ind", 0xff, 0x51, 0x62 },
        { "call_dbl_ind", 0x41, 0xff, 0x5f, 0x62 },
        { "jmp_dbl_ind", 0xff, 0xa1, 0x62, 0xff, 0x00, 0x12 },
        { "jmp_dbl_ind", 0x41, 0xff, 0xa1, 0x62, 0xff, 0x00, 0x12 },
        { "call_dbl_ind", 0xff, 0x91, 0x62, 0xff, 0x00, 0x12 },
        { "call_dbl_ind", 0x41, 0xff, 0x9f, 0x62, 0xff, 0x00, 0x12 },
        { "call_dbl_ind", 0x41, 0xff, 0x9f, 0x62, 0xff, 0x00, 0x00 },
        { "call_dbl_ind", 0x41, 0xff, 0x10 },
        { "call_dbl_ind", 0x41, 0xff, 0x14, 0x00 },
        { "call_dbl_ind", 0x41, 0xff, 0x16 },
        { "jmp_dbl_ind", 0x41, 0xff, 0x24, 0x00 },
        { "jmp_dbl_ind", 0x41, 0xff, 0x26 },
        { "call_dbl_ind", 0x41, 0xff, 0x50, 0x14 },
        { "call_dbl_ind", 0x41, 0xff, 0x54, 0x00, 0x14 },
        { "call_dbl_ind", 0x41, 0xff, 0x55, 0x00 },
        { "jmp_dbl_ind", 0x41, 0xff, 0x64, 0x00, 0x14 },
        { "jmp_dbl_ind", 0x41, 0xff, 0x65, 0x00 },
        { "call_dbl_ind", 0x41, 0xff, 0x90, 0xf4, 0x01, 0x00, 0x00 },
        { "call_dbl_ind", 0x41, 0xff, 0x94, 0x00, 0xf4, 0x01, 0x00, 0x00 },
        { "call_dbl_ind", 0x41, 0xff, 0x95, 0xf4, 0x01, 0x00, 0x00 },
        { "jmp_dbl_ind", 0x41, 0xff, 0xa4, 0x00, 0xf4, 0x01, 0x00, 0x00 },
        { "jmp_dbl_ind", 0x41, 0xff, 0xa5, 0xf4, 0x01, 0x00, 0x00 },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0x00 },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0x05, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0x06 },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0x0d, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0x0e },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0x15, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0x16 },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0x1d, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0x1e },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0x25, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0x26 },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0x2d, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0x2e },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0x35, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0x36 },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0x3d, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0x3e },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0x45, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0x46 },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0x4d, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0x4e },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0x55, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0x56 },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0x5d, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0x5e },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0x65, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0x66 },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0x6d, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0x6e },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0x75, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0x76 },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0x7d, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0x7e },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0x85, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0x86 },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0x8d, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0x8e },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0x95, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0x96 },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0x9d, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0x9e },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0xa5, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0xa6 },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0xad, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0xae },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0xb5, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0xb6 },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0xbd, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0xbe },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0xc6 },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0xcd, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0xce },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0xd5, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0xd6 },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0xdd, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0xde },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0xe5, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0xe6 },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0xed, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0xee },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0xf5, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0xf6 },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0xfd, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0x42, 0xff, 0x14, 0xfe },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0x05, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0x06 },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0x0d, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0x0e },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0x15, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0x16 },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0x1d, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0x1e },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0x25, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0x26 },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0x2d, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0x2e },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0x35, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0x36 },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0x3d, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0x3e },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0x45, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0x46 },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0x4d, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0x4e },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0x55, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0x56 },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0x5d, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0x5e },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0x65, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0x66 },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0x6d, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0x6e },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0x75, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0x76 },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0x7d, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0x7e },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0x85, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0x86 },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0x8d, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0x8e },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0x95, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0x96 },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0x9d, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0x9e },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0xa5, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0xa6 },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0xad, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0xae },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0xb5, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0xb6 },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0xbd, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0xbe },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0xc5, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0xc6 },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0xcd, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0xce },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0xd5, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0xd6 },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0xdd, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0xde },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0xe5, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0xe6 },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0xed, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0xee },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0xf5, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0xf6 },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0xfd, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0x42, 0xff, 0x24, 0xfe },
        { "call_dbl_ind", 0x42, 0xff, 0x54, 0x00, 0x14 },
        { "call_dbl_ind", 0x42, 0xff, 0x94, 0x00, 0xf4, 0x01, 0x00, 0x00 },
        { "call_dbl_ind", 0x43, 0xff, 0x14, 0x00 },
        { "call_dbl_ind", 0x43, 0xff, 0x54, 0x00, 0x14 },
        { "call_dbl_ind", 0x43, 0xff, 0x94, 0x00, 0xf4, 0x01, 0x00, 0x00 },
        { "call_dbl_ind", 0xff, 0x10 },
        { "call_dbl_ind", 0xff, 0x14, 0x00 },
        { "call_dbl_ind", 0xff, 0x14, 0x05, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0xff, 0x14, 0x06 },
        { "call_dbl_ind", 0xff, 0x14, 0x0d, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0xff, 0x14, 0x0e },
        { "call_dbl_ind", 0xff, 0x14, 0x15, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0xff, 0x14, 0x16 },
        { "call_dbl_ind", 0xff, 0x14, 0x1d, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0xff, 0x14, 0x1e },
        { "call_dbl_ind", 0xff, 0x14, 0x2d, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0xff, 0x14, 0x2e },
        { "call_dbl_ind", 0xff, 0x14, 0x35, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0xff, 0x14, 0x36 },
        { "call_dbl_ind", 0xff, 0x14, 0x3d, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0xff, 0x14, 0x3e },
        { "call_dbl_ind", 0xff, 0x14, 0x45, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0xff, 0x14, 0x46 },
        { "call_dbl_ind", 0xff, 0x14, 0x4d, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0xff, 0x14, 0x4e },
        { "call_dbl_ind", 0xff, 0x14, 0x55, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0xff, 0x14, 0x56 },
        { "call_dbl_ind", 0xff, 0x14, 0x5d, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0xff, 0x14, 0x5e },
        { "call_dbl_ind", 0xff, 0x14, 0x6d, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0xff, 0x14, 0x6e },
        { "call_dbl_ind", 0xff, 0x14, 0x75, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0xff, 0x14, 0x76 },
        { "call_dbl_ind", 0xff, 0x14, 0x7d, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0xff, 0x14, 0x7e },
        { "call_dbl_ind", 0xff, 0x14, 0x85, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0xff, 0x14, 0x86 },
        { "call_dbl_ind", 0xff, 0x14, 0x8d, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0xff, 0x14, 0x8e },
        { "call_dbl_ind", 0xff, 0x14, 0x95, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0xff, 0x14, 0x96 },
        { "call_dbl_ind", 0xff, 0x14, 0x9d, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0xff, 0x14, 0x9e },
        { "call_dbl_ind", 0xff, 0x14, 0xad, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0xff, 0x14, 0xae },
        { "call_dbl_ind", 0xff, 0x14, 0xb5, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0xff, 0x14, 0xb6 },
        { "call_dbl_ind", 0xff, 0x14, 0xbd, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0xff, 0x14, 0xbe },
        { "call_dbl_ind", 0xff, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0xff, 0x14, 0xc6 },
        { "call_dbl_ind", 0xff, 0x14, 0xcd, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0xff, 0x14, 0xce },
        { "call_dbl_ind", 0xff, 0x14, 0xd5, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0xff, 0x14, 0xd6 },
        { "call_dbl_ind", 0xff, 0x14, 0xdd, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0xff, 0x14, 0xde },
        { "call_dbl_ind", 0xff, 0x14, 0xed, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0xff, 0x14, 0xee },
        { "call_dbl_ind", 0xff, 0x14, 0xf5, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0xff, 0x14, 0xf6 },
        { "call_dbl_ind", 0xff, 0x14, 0xfd, 0x00, 0x00, 0x00, 0x00 },
        { "call_dbl_ind", 0xff, 0x14, 0xfe },
        { "call_dbl_ind", 0xff, 0x16 },
        { "jmp_dbl_ind", 0xff, 0x24, 0x00 },
        { "jmp_dbl_ind", 0xff, 0x24, 0x05, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0xff, 0x24, 0x06 },
        { "jmp_dbl_ind", 0xff, 0x24, 0x0d, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0xff, 0x24, 0x0e },
        { "jmp_dbl_ind", 0xff, 0x24, 0x15, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0xff, 0x24, 0x16 },
        { "jmp_dbl_ind", 0xff, 0x24, 0x1d, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0xff, 0x24, 0x1e },
        { "jmp_dbl_ind", 0xff, 0x24, 0x2d, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0xff, 0x24, 0x2e },
        { "jmp_dbl_ind", 0xff, 0x24, 0x35, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0xff, 0x24, 0x36 },
        { "jmp_dbl_ind", 0xff, 0x24, 0x3d, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0xff, 0x24, 0x3e },
        { "jmp_dbl_ind", 0xff, 0x24, 0x45, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0xff, 0x24, 0x46 },
        { "jmp_dbl_ind", 0xff, 0x24, 0x4d, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0xff, 0x24, 0x4e },
        { "jmp_dbl_ind", 0xff, 0x24, 0x55, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0xff, 0x24, 0x56 },
        { "jmp_dbl_ind", 0xff, 0x24, 0x5d, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0xff, 0x24, 0x5e },
        { "jmp_dbl_ind", 0xff, 0x24, 0x6d, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0xff, 0x24, 0x6e },
        { "jmp_dbl_ind", 0xff, 0x24, 0x75, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0xff, 0x24, 0x76 },
        { "jmp_dbl_ind", 0xff, 0x24, 0x7d, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0xff, 0x24, 0x7e },
        { "jmp_dbl_ind", 0xff, 0x24, 0x85, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0xff, 0x24, 0x86 },
        { "jmp_dbl_ind", 0xff, 0x24, 0x8d, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0xff, 0x24, 0x8e },
        { "jmp_dbl_ind", 0xff, 0x24, 0x95, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0xff, 0x24, 0x96 },
        { "jmp_dbl_ind", 0xff, 0x24, 0x9d, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0xff, 0x24, 0x9e },
        { "jmp_dbl_ind", 0xff, 0x24, 0xad, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0xff, 0x24, 0xae },
        { "jmp_dbl_ind", 0xff, 0x24, 0xb5, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0xff, 0x24, 0xb6 },
        { "jmp_dbl_ind", 0xff, 0x24, 0xbd, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0xff, 0x24, 0xbe },
        { "jmp_dbl_ind", 0xff, 0x24, 0xc5, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0xff, 0x24, 0xc6 },
        { "jmp_dbl_ind", 0xff, 0x24, 0xcd, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0xff, 0x24, 0xce },
        { "jmp_dbl_ind", 0xff, 0x24, 0xd5, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0xff, 0x24, 0xd6 },
        { "jmp_dbl_ind", 0xff, 0x24, 0xdd, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0xff, 0x24, 0xde },
        { "jmp_dbl_ind", 0xff, 0x24, 0xed, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0xff, 0x24, 0xee },
        { "jmp_dbl_ind", 0xff, 0x24, 0xf5, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0xff, 0x24, 0xf6 },
        { "jmp_dbl_ind", 0xff, 0x24, 0xfd, 0x00, 0x00, 0x00, 0x00 },
        { "jmp_dbl_ind", 0xff, 0x24, 0xfe },
        { "jmp_dbl_ind", 0xff, 0x26 },
        { "call_dbl_ind", 0xff, 0x50, 0x14 },
        { "call_dbl_ind", 0xff, 0x54, 0x00, 0x14 },
        { "call_dbl_ind", 0xff, 0x55, 0x00 },
        { "jmp_dbl_ind", 0xff, 0x64, 0x00, 0x14 },
        { "jmp_dbl_ind", 0xff, 0x65, 0x00 },
        { "call_dbl_ind", 0xff, 0x90, 0xf4, 0x01, 0x00, 0x00 },
        { "call_dbl_ind", 0xff, 0x94, 0x00, 0xf4, 0x01, 0x00, 0x00 },
        { "call_dbl_ind", 0xff, 0x95, 0xf4, 0x01, 0x00, 0x00 },
        { "jmp_dbl_ind", 0xff, 0xa4, 0x00, 0xf4, 0x01, 0x00, 0x00 },
        { "jmp_dbl_ind", 0xff, 0xa5, 0xf4, 0x01, 0x00, 0x00 },
        { "ret", 0xc2, 0x81, 0x12 },
        { "ret", 0xf2, 0xc3 },
    };
    // NOLINTEND(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays)
    static constexpr size_t k_num_k_test_pairs =
        sizeof(k_test_pairs) / sizeof(k_test_pairs[0]);

    // NOLINTNEXTLINE(modernize-loop-convert)
    for (size_t i = 0; i < k_num_k_test_pairs; ++i) {
        std::array<uint8_t, tlo::system::k_max_insn_sz> insn_bytes;
        std::memset(insn_bytes.data(), 0, insn_bytes.size());
        std::memcpy(insn_bytes.data(), k_test_pairs[i].bytes_.data(),
                    k_test_pairs[i].nbytes_);
        const tlo::system::br_insn_t br_insn =
            tlo::system::br_insn_t::find(insn_bytes);
        if (k_test_pairs[i].expec_name_[0] != 0) {
            ASSERT_TRUE(br_insn.good());
            ASSERT_STREQ(k_test_pairs[i].expec_name_, br_insn.name());
        }
        else {
            ASSERT_TRUE(br_insn.bad());
        }
    }
}
